import sys,os
from PyQt5.QtWidgets import QSizePolicy,QGridLayout,QDialog,QLabel,QApplication,QWidget,QTabWidget,QComboBox
from PyQt5.QtWidgets import QHBoxLayout, QVBoxLayout, QDialog, QPushButton, QLabel,QWidget,QApplication
from PyQt5.QtGui import QPixmap,QIcon
class ShowResult(QDialog):
    def __init__(self):
        super().__init__()
        self.setWindowTitle('推演对比')
        self.setWindowIcon(QIcon('tank.png'))
        self.setStyleSheet('QPushButton{color:black;background-color:white;border-radius:15px;border: 3px solid blue}')
        self.t = QTabWidget()
        self.tab1 = QWidget()
        self.tab2 = QWidget()
        self.tab3 = QWidget()
        # 主菜单控件设置
        self.t.addTab(self.tab1, "PPO")
        self.t.addTab(self.tab2, "DQN")
        self.t.addTab(self.tab3, "总览")
        # PPO菜单栏下基本控件创建
        self.b_11 = QPushButton('PPO')
        self.b_11.pressed.connect(self.show_ppo)
        self.b_12 = QPushButton('PK-PPO')
        self.b_12.pressed.connect(self.show_pk_ppo)
        self.b_13 = QPushButton('IFN M-PPO(保守)')
        self.b_13.pressed.connect(self.show_ifnm_ppo1)
        self.b_14 = QPushButton('IFN M-PPO(均衡)')
        self.b_14.pressed.connect(self.show_ifnm_ppo2)
        self.b_15 = QPushButton('IFN M-PPO(激进)')
        self.b_15.pressed.connect(self.show_ifnm_ppo3)
        self.b_16 = QPushButton('RN M-PPO(保守)')
        self.b_16.pressed.connect(self.show_rnm_ppo1)
        self.b_17 = QPushButton('RN M-PPO(均衡)')
        self.b_17.pressed.connect(self.show_rnm_ppo2)
        self.b_18 = QPushButton('RN M-PPO(激进)')
        self.b_18.pressed.connect(self.show_rnm_ppo3)
        l_1v = QVBoxLayout()
        l_1v.addWidget(self.b_11)
        l_1v.addWidget(self.b_12)
        l_1v.addWidget(self.b_13)
        l_1v.addWidget(self.b_14)
        l_1v.addWidget(self.b_15)
        l_1v.addWidget(self.b_16)
        l_1v.addWidget(self.b_17)
        l_1v.addWidget(self.b_18)
        # 显示PPO算法下推演结果
        h_1w = QWidget()
        h_1w.setLayout(l_1v)
        self.img_11 = QLabel()
        self.img_11.setMaximumSize(300, 300)
        self.img_11.setPixmap(QPixmap("./results/PPO/get_goal_score.jpg"))
        self.img_11.setScaledContents(True)
        self.img_12 = QLabel()
        self.img_12.setMaximumSize(300, 300)
        self.img_12.setPixmap(QPixmap("./results/PPO/kill_score.jpg"))
        self.img_12.setScaledContents(True)
        self.img_13 = QLabel()
        self.img_13.setMaximumSize(300, 300)
        self.img_13.setPixmap(QPixmap("./results/PPO/survive_score.jpg"))
        self.img_13.setScaledContents(True)
        self.img_14 = QLabel()
        self.img_14.setMaximumSize(300, 300)
        self.img_14.setPixmap(QPixmap("./results/PPO/win_rate.jpg"))
        self.img_14.setScaledContents(True)
        self.img_15 = QLabel()
        self.img_15.setMaximumSize(300, 300)
        self.img_15.setPixmap(QPixmap("./results/PPO/win_times.jpg"))
        self.img_15.setScaledContents(True)
        self.img_16 = QLabel()
        self.img_16.setMaximumSize(300, 300)
        # self.img_16.setPixmap(QPixmap("./results/IFN M-PPO(均衡)/威胁度评估.jpg"))
        self.img_16.setScaledContents(True)
        v_1 = QGridLayout()
        v_1.addWidget(h_1w,0,0,2,1)
        v_1.addWidget(self.img_11,0,1)
        v_1.addWidget(self.img_12,0,2)
        v_1.addWidget(self.img_13,0,3)
        v_1.addWidget(self.img_14,1,1)
        v_1.addWidget(self.img_15,1,2)
        v_1.addWidget(self.img_16,1,3)
        self.tab1.setLayout(v_1)
        # DQN菜单栏下基本控件创建
        self.b_21 = QPushButton('DQN')
        self.b_21.pressed.connect(self.show_dqn)
        self.b_22 = QPushButton('PK-DQN')
        self.b_22.pressed.connect(self.show_pk_dqn)
        self.b_23 = QPushButton('IFN M-DQN')
        self.b_23.pressed.connect(self.show_ifnm_dqn)
        self.b_24 = QPushButton('RN M-DQN')
        self.b_24.pressed.connect(self.show_rnm_dqn)
        l_2v = QVBoxLayout()
        l_2v.addWidget(self.b_21)
        l_2v.addWidget(self.b_22)
        l_2v.addWidget(self.b_23)
        l_2v.addWidget(self.b_24)
        h_2w = QWidget()
        # 显示DQN算法下推演结果
        h_2w.setLayout(l_2v)
        self.img_21 = QLabel()
        self.img_21.setMaximumSize(300, 300)
        self.img_21.setPixmap(QPixmap("./results/DQN/get_goal_score.jpg"))
        self.img_21.setScaledContents(True)
        self.img_22 = QLabel()
        self.img_22.setMaximumSize(300, 300)
        self.img_22.setPixmap(QPixmap("./results/DQN/kill_score.jpg"))
        self.img_22.setScaledContents(True)
        self.img_23 = QLabel()
        self.img_23.setMaximumSize(300, 300)
        self.img_23.setPixmap(QPixmap("./results/DQN/survive_score.jpg"))
        self.img_23.setScaledContents(True)
        self.img_24 = QLabel()
        self.img_24.setMaximumSize(300, 300)
        self.img_24.setPixmap(QPixmap("./results/DQN/win_rate.jpg"))
        self.img_24.setScaledContents(True)
        self.img_25 = QLabel()
        self.img_25.setMaximumSize(300, 300)
        self.img_25.setPixmap(QPixmap("./results/DQN/win_times.jpg"))
        self.img_25.setScaledContents(True)
        self.img_26 = QLabel()
        self.img_26.setMaximumSize(300, 300)
        # self.img_26.setPixmap(QPixmap("./results/IFN M-PPO(均衡)/威胁度评估.jpg"))
        self.img_26.setScaledContents(True)
        v_2 = QGridLayout()
        v_2.addWidget(h_2w, 0, 0, 2, 1)
        v_2.addWidget(self.img_21, 0, 1)
        v_2.addWidget(self.img_22, 0, 2)
        v_2.addWidget(self.img_23, 0, 3)
        v_2.addWidget(self.img_24, 1, 1)
        v_2.addWidget(self.img_25, 1, 2)
        v_2.addWidget(self.img_26, 1, 3)
        self.tab2.setLayout(v_2)

        self.img_31 = QLabel()
        self.img_31.setMaximumSize(800, 800)
        self.img_31.setPixmap(QPixmap("总览图_ppo.png"))
        self.img_31.setScaledContents(True)
        b_31 = QPushButton('对比PPO')
        b_31.pressed.connect(self.show_31_image)
        b_32 = QPushButton('对比DQN')
        b_32.pressed.connect(self.show_32_image)
        b_33 = QPushButton('PPO tensorboard图')
        b_33.pressed.connect(self.show_33_image)
        b_34 = QPushButton('PK-PPO回报值图')
        b_34.pressed.connect(self.show_34_image)
        b_35 = QPushButton('PK-PPO收敛图')
        b_35.pressed.connect(self.show_35_image)
        self.com_b = QComboBox()
        self.com_b.addItems(['DQN win rate','IFNM-DQN win rate','PK-DQN win rate','PK-PPO win rate','PPO win rate','RNM-DQN win rate','IFNM-PPO win rate','RNM-PPO win rate','DQN win rate'])
        p_31 = QPushButton('打开excel数据表')
        p_31.pressed.connect(self.open_5_excel)
        v_3 = QVBoxLayout()
        v_3.addWidget(b_31)
        v_3.addWidget(b_32)
        v_3.addWidget(b_33)
        v_3.addWidget(b_34)
        v_3.addWidget(b_35)
        v_3.addWidget(self.com_b)
        v_3.addWidget(p_31)
        v_w = QWidget()
        v_w.setLayout(v_3)
        h_3 = QHBoxLayout()
        h_3.addWidget(self.img_31)
        h_3.addWidget(v_w)
        self.tab3.setLayout(h_3)
        layout = QHBoxLayout()
        layout.addWidget(self.t)
        self.setLayout(layout)
    # PPO算法推演结果可视化加载函数
    def show_ppo(self):
        self.img_11.setPixmap(QPixmap("./results/PPO/get_goal_score.jpg"))
        self.img_11.setScaledContents(True)
        self.img_12.setPixmap(QPixmap("./results/PPO/kill_score.jpg"))
        self.img_12.setScaledContents(True)
        self.img_13.setPixmap(QPixmap("./results/PPO/survive_score.jpg"))
        self.img_13.setScaledContents(True)
        self.img_14.setPixmap(QPixmap("./results/PPO/win_rate.jpg"))
        self.img_14.setScaledContents(True)
        self.img_15.setPixmap(QPixmap("./results/PPO/win_times.jpg"))
        self.img_15.setScaledContents(True)
        # self.img_16.setPixmap(QPixmap("./results/RN M-PPO(均衡)/ss_wxz.jpg"))
        self.img_16.setScaledContents(True)
    # PK-PPO算法推演结果可视化加载函数
    def show_pk_ppo(self):
        self.img_11.setPixmap(QPixmap("./results/PK-PPO/get_goal_score.jpg"))
        self.img_11.setScaledContents(True)
        self.img_12.setPixmap(QPixmap("./results/PK-PPO/kill_score.jpg"))
        self.img_12.setScaledContents(True)
        self.img_13.setPixmap(QPixmap("./results/PK-PPO/survive_score.jpg"))
        self.img_13.setScaledContents(True)
        self.img_14.setPixmap(QPixmap("./results/PK-PPO/win_rate.jpg"))
        self.img_14.setScaledContents(True)
        self.img_15.setPixmap(QPixmap("./results/PK-PPO/win_times.jpg"))
        self.img_15.setScaledContents(True)
        # self.img_16.setPixmap(QPixmap("./results/RN M-PPO(均衡)/ss_wxz.jpg"))
        self.img_16.setScaledContents(True)
    # RN M-PPO(均衡)算法推演结果可视化加载函数
    def show_rnm_ppo2(self):
        self.img_11.setPixmap(QPixmap("./results/RN M-PPO(均衡)/ss_get_goal_score.jpg"))
        self.img_11.setScaledContents(True)
        self.img_12.setPixmap(QPixmap("./results/RN M-PPO(均衡)/ss_kill_score.jpg"))
        self.img_12.setScaledContents(True)
        self.img_13.setPixmap(QPixmap("./results/RN M-PPO(均衡)/ss_survive_score.jpg"))
        self.img_13.setScaledContents(True)
        self.img_14.setPixmap(QPixmap("./results/RN M-PPO(均衡)/ss_win_rate.jpg"))
        self.img_14.setScaledContents(True)
        self.img_15.setPixmap(QPixmap("./results/RN M-PPO(均衡)/ss_win_times.jpg"))
        self.img_15.setScaledContents(True)
        self.img_16.setPixmap(QPixmap("./results/RN M-PPO(均衡)/ss_wxz.jpg"))
        self.img_16.setScaledContents(True)
    # RN M-PPO(激进)算法推演结果可视化加载函数
    def show_rnm_ppo3(self):
        self.img_11.setPixmap(QPixmap("./results/RN M-PPO(激进)/ss_get_goal_score.jpg"))
        self.img_11.setScaledContents(True)
        self.img_12.setPixmap(QPixmap("./results/RN M-PPO(激进)/ss_kill_score.jpg"))
        self.img_12.setScaledContents(True)
        self.img_13.setPixmap(QPixmap("./results/RN M-PPO(激进)/ss_survive_score.jpg"))
        self.img_13.setScaledContents(True)
        self.img_14.setPixmap(QPixmap("./results/RN M-PPO(激进)/ss_win_rate.jpg"))
        self.img_14.setScaledContents(True)
        self.img_15.setPixmap(QPixmap("./results/RN M-PPO(激进)/ss_win_times.jpg"))
        self.img_15.setScaledContents(True)
        self.img_16.setPixmap(QPixmap("./results/RN M-PPO(激进)/ss_wxz1.jpg"))
        self.img_16.setScaledContents(True)
    # RN M-PPO(保守)算法推演结果可视化加载函数
    def show_rnm_ppo1(self):
        self.img_11.setPixmap(QPixmap("./results/RN M-PPO(保守)/ss_get_goal_score.jpg"))
        self.img_11.setScaledContents(True)
        self.img_12.setPixmap(QPixmap("./results/RN M-PPO(保守)/ss_kill_score.jpg"))
        self.img_12.setScaledContents(True)
        self.img_13.setPixmap(QPixmap("./results/RN M-PPO(保守)/ss_survive_score.jpg"))
        self.img_13.setScaledContents(True)
        self.img_14.setPixmap(QPixmap("./results/RN M-PPO(保守)/ss_win_rate.jpg"))
        self.img_14.setScaledContents(True)
        self.img_15.setPixmap(QPixmap("./results/RN M-PPO(保守)/ss_win_times.jpg"))
        self.img_15.setScaledContents(True)
        self.img_16.setPixmap(QPixmap("./results/RN M-PPO(保守)/ss_wxz2.jpg"))
        self.img_16.setScaledContents(True)
    # DQN算法推演结果可视化加载函数
    def show_dqn(self):
        self.img_21.setPixmap(QPixmap("./results/DQN/get_goal_score.jpg"))
        self.img_21.setScaledContents(True)
        self.img_22.setPixmap(QPixmap("./results/DQN/kill_score.jpg"))
        self.img_22.setScaledContents(True)
        self.img_23.setPixmap(QPixmap("./results/DQN/survive_score.jpg"))
        self.img_23.setScaledContents(True)
        self.img_24.setPixmap(QPixmap("./results/DQN/win_rate.jpg"))
        self.img_24.setScaledContents(True)
        self.img_25.setPixmap(QPixmap("./results/DQN/win_times.jpg"))
        self.img_25.setScaledContents(True)
        # self.img_26.setPixmap(QPixmap("./results/RN M-DQN/ss_wxz2.jpg"))
        self.img_26.setScaledContents(True)
    # PK-DQN算法推演结果可视化加载函数
    def show_pk_dqn(self):
        self.img_21.setPixmap(QPixmap("./results/PK-DQN/get_goal_score.jpg"))
        self.img_21.setScaledContents(True)
        self.img_22.setPixmap(QPixmap("./results/PK-DQN/kill_score.jpg"))
        self.img_22.setScaledContents(True)
        self.img_23.setPixmap(QPixmap("./results/PK-DQN/survive_score.jpg"))
        self.img_23.setScaledContents(True)
        self.img_24.setPixmap(QPixmap("./results/PK-DQN/win_rate.jpg"))
        self.img_24.setScaledContents(True)
        self.img_25.setPixmap(QPixmap("./results/PK-DQN/win_times.jpg"))
        self.img_25.setScaledContents(True)
        # self.img_26.setPixmap(QPixmap("./results/RN M-DQN/ss_wxz2.jpg"))
        self.img_26.setScaledContents(True)
    # RN M-DQN算法推演结果可视化加载函数
    def show_rnm_dqn(self):
        self.img_21.setPixmap(QPixmap("./results/RN M-DQN/ss_get_goal_score.jpg"))
        self.img_21.setScaledContents(True)
        self.img_22.setPixmap(QPixmap("./results/RN M-DQN/ss_kill_score.jpg"))
        self.img_22.setScaledContents(True)
        self.img_23.setPixmap(QPixmap("./results/RN M-DQN/ss_survive_score.jpg"))
        self.img_23.setScaledContents(True)
        self.img_24.setPixmap(QPixmap("./results/RN M-DQN/ss_win_rate.jpg"))
        self.img_24.setScaledContents(True)
        self.img_25.setPixmap(QPixmap("./results/RN M-DQN/ss_win_times.jpg"))
        self.img_25.setScaledContents(True)
        self.img_26.setPixmap(QPixmap("./results/RN M-DQN/ss_wxz2.jpg"))
        self.img_26.setScaledContents(True)
    # IFN M-PPO(均衡)算法推演结果可视化加载函数
    def show_ifnm_ppo2(self):
        self.img_11.setPixmap(QPixmap("./results/IFN M-PPO(均衡)/夺控点得分.jpg"))
        self.img_11.setScaledContents(True)
        self.img_12.setPixmap(QPixmap("./results/IFN M-PPO(均衡)/击杀得分.jpg"))
        self.img_12.setScaledContents(True)
        self.img_13.setPixmap(QPixmap("./results/IFN M-PPO(均衡)/生存得分.jpg"))
        self.img_13.setScaledContents(True)
        self.img_14.setPixmap(QPixmap("./results/IFN M-PPO(均衡)/胜率.jpg"))
        self.img_14.setScaledContents(True)
        self.img_15.setPixmap(QPixmap("./results/IFN M-PPO(均衡)/胜利次数.jpg"))
        self.img_15.setScaledContents(True)
        self.img_16.setPixmap(QPixmap("./results/IFN M-PPO(均衡)/威胁度评估.jpg"))
        self.img_16.setScaledContents(True)
    # IFN M-PPO(激进)算法推演结果可视化加载函数
    def show_ifnm_ppo3(self):
        self.img_11.setPixmap(QPixmap("./results/IFN M-PPO(激进)/mhs_get_goal_score.jpg"))
        self.img_11.setScaledContents(True)
        self.img_12.setPixmap(QPixmap("./results/IFN M-PPO(激进)/mhs_kill_score.jpg"))
        self.img_12.setScaledContents(True)
        self.img_13.setPixmap(QPixmap("./results/IFN M-PPO(激进)/mhs_survive_score.jpg"))
        self.img_13.setScaledContents(True)
        self.img_14.setPixmap(QPixmap("./results/IFN M-PPO(激进)/mhs_win_rate.jpg"))
        self.img_14.setScaledContents(True)
        self.img_15.setPixmap(QPixmap("./results/IFN M-PPO(激进)/mhs_win_times.jpg"))
        self.img_15.setScaledContents(True)
        self.img_16.setPixmap(QPixmap("./results/IFN M-PPO(激进)/mhs_wxz1.jpg"))
        self.img_16.setScaledContents(True)
    # IFN M-PPO(保守)算法推演结果可视化加载函数
    def show_ifnm_ppo1(self):
        self.img_11.setPixmap(QPixmap("./results/IFN M-PPO(保守)/mhs_get_goal_score.jpg"))
        self.img_11.setScaledContents(True)
        self.img_12.setPixmap(QPixmap("./results/IFN M-PPO(保守)/mhs_kill_score.jpg"))
        self.img_12.setScaledContents(True)
        self.img_13.setPixmap(QPixmap("./results/IFN M-PPO(保守)/mhs_survive_score.jpg"))
        self.img_13.setScaledContents(True)
        self.img_14.setPixmap(QPixmap("./results/IFN M-PPO(保守)/mhs_win_rate.jpg"))
        self.img_14.setScaledContents(True)
        self.img_15.setPixmap(QPixmap("./results/IFN M-PPO(保守)/mhs_win_times.jpg"))
        self.img_15.setScaledContents(True)
        self.img_16.setPixmap(QPixmap("./results/IFN M-PPO(保守)/mhs_wxz2.jpg"))
        self.img_16.setScaledContents(True)
    def show_ifnm_dqn(self):
        self.img_21.setPixmap(QPixmap("./results/IFN M-DQN/mhs_get_goal_score.jpg"))
        self.img_21.setScaledContents(True)
        self.img_22.setPixmap(QPixmap("./results/IFN M-PPO(保守)/mhs_kill_score.jpg"))
        self.img_22.setScaledContents(True)
        self.img_23.setPixmap(QPixmap("./results/IFN M-DQN/mhs_survive_score.jpg"))
        self.img_23.setScaledContents(True)
        self.img_24.setPixmap(QPixmap("./results/IFN M-DQN/mhs_win_rate.jpg"))
        self.img_24.setScaledContents(True)
        self.img_25.setPixmap(QPixmap("./results/IFN M-DQN/mhs_win_times.jpg"))
        self.img_25.setScaledContents(True)
        self.img_26.setPixmap(QPixmap("./results/IFN M-DQN/mhs_wxz2.jpg"))
        self.img_26.setScaledContents(True)
    def show_31_image(self):
        self.img_31.setMaximumSize(800, 800)
        self.img_31.setPixmap(QPixmap("总览图_ppo.png"))
        self.img_31.setScaledContents(True)
    def show_32_image(self):
        self.img_31.setMaximumSize(800, 800)
        self.img_31.setPixmap(QPixmap("总览图_dqn.png"))
        self.img_31.setScaledContents(True)
    def show_33_image(self):
        self.img_31.setMaximumSize(800, 800)
        self.img_31.setPixmap(QPixmap("tensorboard.png"))
        self.img_31.setScaledContents(True)
    def show_34_image(self):
        self.img_31.setMaximumSize(800, 800)
        self.img_31.setPixmap(QPixmap("PK-PPO回报值图.png"))
        self.img_31.setScaledContents(True)
    def show_35_image(self):
        self.img_31.setMaximumSize(800, 800)
        self.img_31.setPixmap(QPixmap("PK-PPO收敛图.png"))
        self.img_31.setScaledContents(True)
    # 不同算法推演数据存储表加载函数
    def open_5_excel(self):
        text = self.com_b.currentText()
        import os
        if text == 'PPO win rate':
            os.system('start ./results/PPO_winrate.xlsx')
        elif text == 'DQN win rate':
            os.system('start ./results/DQN_winrate.xlsx')
        elif text =='IFNM-DQN win rate':
            os.system('start ./results/IFNM-DQN_winrate.xlsx')
        elif text =='PK-DQN win rate':
            os.system('start ./results/PK-DQN_winrate.xlsx')
        elif text =='PK-PPO win rate':
            os.system('start ./results/PK-PPO_winrate.xlsx')
        elif text =='RNM-DQN win rate':
            os.system('start ./results/RNM-DQN_winrate.xlsx')
        elif text =='IFNM-PPO win rate':
            os.system('start ./results/IFNM-PPO_winrate.xlsx')
        elif text =='RNM-PPO win rate':
            os.system('start ./results/RNM-PPO_winrate.xlsx')
        elif text =='DQN win rate':
            os.system('start ./results/DQN_winrate.xlsx')
        else:
            pass



if __name__ == '__main__':
    app = QApplication(sys.argv)
    d = ShowResult()
    d.show()
    sys.exit(app.exec())
